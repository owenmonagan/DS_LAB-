Chat server


Joining:

Client
JOIN_CHATROOM: [chatroom name]
CLIENT_IP: [IP Address of client if UDP | 0 if TCP]
PORT: [port number of client if UDP | 0 if TCP]
CLIENT_NAME: [string Handle to identifier client user]

Server Response
JOINED_CHATROOM: [chatroom name]
SERVER_IP: [IP address of chat room]
PORT: [port number of chat room]
ROOM_REF: [integer that uniquely identifies chat room on server]
JOIN_ID: [integer that uniquely identifies client joining]

LEAVING:

Client
LEAVE_CHATROOM: [ROOM_REF]
JOIN_ID: [integer previously provided by server on join]
CLIENT_NAME: [string Handle to identifier client user]

Server Response
LEFT_CHATROOM: [ROOM_REF]
JOIN_ID: [integer previously provided by server on join]

MESSAGING:
CHAT: [ROOM_REF]
JOIN_ID: [integer identifying client to server]
CLIENT_NAME: [string identifying client user]
MESSAGE: [string terminated with '\n\n']

CHAT: [ROOM_REF]
CLIENT_NAME: [string identifying client user]
MESSAGE: [string terminated with '\n\n']









Error:
ERROR_CODE: [integer]
ERROR_DESCRIPTION: [string describing error]

Server Stores:
IP
PORT

ChatRooms
    RoomRef
    ActiveMembers
        Client (chatsever.roomschat[0].get(client ref)
    RecentMessage
        Client Name


Clients
    Name
    Join_ID
    IP
PORT


if first_line == "KILL_SERVICE\n":
            self.request.sendall("Service Killed")
            print ("Service killed by Client\n")
            ThreadedTCPServer.serverAlive = False
            server.shutdown()
            server.server_close()
            exit()


        if first_line == "HELO BASE_TEST\n":
            requestString = ("HELO BASE_TEST\nIP:{}\nPort:{}\nStudentID:{}\n".format(my_ip, port, studentNumber))